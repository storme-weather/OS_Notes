Chapter 12 (Web Servers) This will only deal with the communication aspect of the chapter for a presentation
- Hypertext transfer protocol
	- All communication in the web between clients and servers are based on HTTP (HYPERTEXT TRANSFER PROTOCOL)
	- HTTP is basically the client sending a message to the server and waiting for a response
	- HTTP is stateless, meaning it has no clue about the connection and does not need a server to maintain information on its clients
	- HTTP Connections
		- Typically based on TCP. When a client sends a request to a server, it is setup by a TCP connection with the server. This TCP connection is used to obtain a response back from the server.
		  Due to using TCP, HTTP doesn't need to know about the connection (being lost or still up). Both client and server assume the messages make it across. If something has gone wrong (connection
		  time out or error), then it is reported, but no attempt in recovering the data.
		- Old versions of HTTP had issues with inefficient use of TCP connections. 
		- in HTTP 1.0 or older, each request to a server required a separate connection. When the server responded, the connection wa sbroken down. These are known as nonpersistent connections A
		  drawback of nonpersistent connections is the cost of setting up TCP connections. Time to transfer a document to a client is a lot.
		- HTTP does not prevent the client from starting seveal connections simultaneously to the same server. This is to hide latency caused by connection setup time and to transfer data in parallel
		  from the server to the client.
		- HTTP 1.1 made use of persistent connections, which issues several requests for each ((request, response)
	- HTTP Methods:
		- Head: Requests to return the header of a document
		- Get: Request to return a document to the client
		- Put: request to store document
		- Post: Provide data that are to be added to a document
		- Delete: Request to delete a document
		- head operation is submitted tot he server when a client does not want the actual document, but only the metadata
			Ex) using head operation will return the time the referred document was modified. Can be used to verify the validity of the document cached by the client. Check if a document exists 
			    without having to transfer the document
		- Most important HTTP operation is get, and is used to fetch documents from the server to give to the client. Possible to specify that a document should return only if it has been modified
		  (since the user last cached the file). Files can have tags (character strings), and GET files that have a matching tag.
		- PUT is opposite of get. The client wants to store a document on the server under a given name. Servers won't blindly allow the client to run PUT, but will allow authorized clients to do so
		  (not covered in this part).
		- POST is similar to PUT, except the client will request data to be added to a document or collection of documents. 
			Ex) posting an article to a news group. The distinguishing deature, compared to a put is that a post tells which group of documents an article should be added to. 
		- DELETE is used to request a server to remove the document that is named in the message sent to the server. Of course security needs to be in place. Sometimes the server may not have
		  permission to delete the file

	- HTTP messages
		- All communication between a client and server is through messages, and HTTP only recognizes request and response messages.
		- Request messages have 3 parts:
			1) Request line: This is mandatory and identifies the operation that the client wants the server to carry out along with a reference to the document associated with that requesti.
				| Operation | Reference | Version |
			2) Request message headers: way for the client to specify what kind of responses it wants back from the server
				Ex) client wants to do a GET on specific files that haven't been updated in 10 days (If-Modified-Since)
			3) Message Body
		- Response message consists of 3 parts:
			1) Status line: containing a version number, 3 digit status code, and phrase
				- 200 OK
				- 404 Not Found
			2) Response message headers:
				Ex) server saying a response is no longer valid (Expire message header)
